#!/bin/bash

#   Copyright (C) 2003, 2005  Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.  

#
# gcore.sh
# Script to generate a core file of a running program.
# It starts up gdb, attaches to the given PID and invokes the gcore command.
#

# modified from original gcore.sh by Takanori Suzuki

while getopts "o:n:b:" flag; do
    case $flag in
        \?) assert=true;;
        o) opt_o="$OPTARG"
           opt_o_on=true;;
        n) opt_n="$OPTARG"
           opt_n_on=true;;
        b) opt_b="$OPTARG"
           opt_b_on=true;;
    esac
done

shift_num=0
trap_cmd=""
if [ "$opt_o_on" = true ]; then
    name="$opt_o"
    shift_num=$(($shift_num + 2))
else
    name=core
fi

if [ "$opt_n_on" = true ]; then
    pid_list=$(pgrep -x $opt_n)
    shift_num=$(($shift_num + 2))
fi 

if [ "$opt_b_on" = true ]; then 
    bp=$opt_b
    shift_num=$(($shift_num + 2))
else
    bpcheck=no_bp
fi

for((i=0 ; i < $shift_num ; i++ ))
do
    shift
done

if [ "$#" -eq "0" -a "$opt_n_on" != true ]
then
    echo "usage: $0 [-o filename] [-b breakpoint] [-n prog_name | pid]"
    exit 2
fi

function create_tmpfile ()
{
	# Create a temporary file.  Use mktemp if available, but cope if it is not.
	tmpfile=`mktemp ${name}.XXXXXX 2>/dev/null` || {
	  tmpfile=${name}.$$
	  if test -e $tmpfile; then
	    echo "Could not create temporary file $tmpfile"
	    exit 1
	  fi
	  touch $tmpfile
	}
}

function get_child_child_pid ()
{
	if [ "$1" == "" ]
	then
		return
	fi
	child_pids=$(pgrep -P $1)
	child_child_pids=$(echo $child_pids|sed s/\ /\,/g)
	echo $child_child_pids
}

function get_gid_pid ()
{
	child_child_pid=$(get_child_child_pid $1|sed s/\ /\,/g)
	if [ "$child_child_pid" == "" ]
	then
		return
	fi
	gdb_pid_list=$(pgrep  -fx "gdb -x ${name}.* -batch" -P $child_child_pid)
	echo $gdb_pid_list
}

function get_core ()
{
	create_tmpfile
	trap_cmd="rm -f $tmpfile"
	trap "$trap_cmd" EXIT

	# Initialise return code.
	rc=0

	if [ "$bpcheck" == "no_bp" ]
	then
		# Write gdb script for pid $pid.  
		cat >>$tmpfile <<EOF
attach $pid
gcore $name.$pid
detach
quit
EOF
	else
		cat >>$tmpfile <<EOF
attach $pid
b $bp
c
gcore $name.$pid
detach
quit
EOF
	fi
	# `</dev/null' to avoid touching interactive terminal if it is
	# available but not accessible (SIGTTIN risk)
	gdb -x $tmpfile -batch </dev/null

	if [ -r $name.$pid ] ; then 
	    rc=0
	else
	    echo gcore: failed to create $name.$pid
	    rc=1
	    break
	fi
	gdb_pid_list=$(get_gid_pid $$)
	if [ "$gdb_pid_list" != "" ] ; then
		kill -INT $gdb_pid_list  > /dev/null 2>&1
	fi
	$trap_cmd
}

# Loop through pids
if [ "$opt_n_on" != true ]
then
	pid_list=$*
fi

for pid in $pid_list
do
	get_core &
done
#sleep 5
while [ "$(get_gid_pid $$)" != "" ] ; do
	sleep 2
done

exit $rc
